title: Vagrant & CFEngine: Full of Awesome
footer: Nick Anderson
subfooter: Vagrant & CFEngine: Full of Awesome - July 2012 

h1(fullscreen). Vagrant & CFEngine: Full of Awesome
{{ gradient silver white silver white }}

!images/vagrant_logo.png!
!images/enterprize_robot_big.png!

h1. New Test Env Setup 
{{ gradient silver white silver white }}
{% left %}
* New developers
* New projects
* Different projects
* Crazy testing
{% end %}
{% right %}
* slow
* frustrating
{% end %}

Usually manual instructions don't get updated.

h1. Solution
{{ gradient silver white silver white }}

* Virtual Machines!

*(step) They are BIG
*(step) Prone to knowledge loss
*(step) Not easily moved across platforms/bare metal

h1. Better Solution
{{ gradient silver white silver white }}

h2. Distill configuration to simple form
* Vagrant - Describe Virtual machines
* CFEngine - Describe OS and application state configuration

h1. Vagrant is
{{ gradient silver white silver white }}
* Written in Ruby
* Wrapper for Virtualbox
* Easy to get started

{{{
Vagrant::Config.run do |config|
  config.vm.box = "centos_6_x86_64_minimal_4.1.12"
  config.vm.box_url = "https://dl.dropbox.com/u/5861161/vagrant/CentOS-6.0-x86_64-netboot-4.1.12.box"
  config.vm.boot_mode = :gui
  config.vm.define :cfhub do |hub_config|
    hub_config.vm.host_name="cfhub"
    hub_config.vm.network :hostonly, "10.1.1.10"
    config.vm.forward_port 80, 8080
  end
end
}}}

h1. CFEngine is
{{ gradient silver white silver white }}
* Written in C
* Godfather of Configuration Managment systems
* Difficult to get started
**(step) But it gets easier 

{{{
{{ include examples/cfengine_example.cf }}
}}}

h1. Getting Started with CFEngine and Vagrant
{{ gradient silver white silver white }}

h2. Sharing is caring, its on github, go forth and fork

"*https://github.com/nickanderson/CFEngine-3-by-example-vagrant*":https://github.com/nickanderson/CFEngine-3-by-example-vagrant

# Clone the project
# Run make && vagrant up 
** (you need to have installed "Virtualbox":https://www.virtualbox.org, "Vagrant":http://vagrantup.com/, and the "CFEngine provisioner":https://github.com/cfengine/vagrant-cfengine-provisioner)

{{{
cd /tmp
git clone https://github.com/nickanderson/CFEngine-3-by-example-vagrant.git
cd /tmp/CFEngine-3-by-example-vagrant/
git checkout fbb35eecd1d071a772e4fc5a85e9db711473d2c8
make && vagrant up
}}}


h1. CFEngine Design Center
{{ gradient silver white silver white }}
{% left %}
h2. What it is
* Repository of community driven reusable policy
* Curated by CFEngine staff
{% end %}
{% right %}
h2. Sketches that can help you
* manage hosts file - "System::etc_hosts":https://github.com/cfengine/design-center/tree/master/sketches/system/etc_hosts
* manage resolver - "System::config_resolver":https://github.com/cfengine/design-center/tree/master/sketches/system/config_resolver
* manage timezone - "System::tzconfig":https://github.com/cfengine/design-center/tree/master/sketches/system/tzconfig
* configure sshd - "Security::SSH":https://github.com/cfengine/design-center/tree/master/sketches/networking/ssh
* install and configure wordpresss - "WebApps::wordpress_install":https://github.com/cfengine/design-center/tree/master/sketches/web_apps/wordpress
{% end %}

* more, and growing - "https://github.com/cfengine/design-center":https://github.com/cfengine/design-center

h1(fullscreen). Extending the CFEngine Policy
{{ gradient silver white silver white }}

h1. Install cf-sketch
{{ gradient silver white silver white }}

# Copy 01_install_cfsketch.cf into place
{{{    
    vagrant ssh cfhub
    sudo -i
    mkdir /var/cfengine/masterfiles/solutions
    cp /vagrant/exercises/solutions/01_install_cfsketch.cf /var/cfengine/masterfiles/solutions
}}}
# add to body common control inputs in promises.cf
# add method call in main

{{{
--- a/promises.cf
+++ b/promises.cf
  inputs => { 
             "cfengine_stdlib.cf", 
             "firewall.cf",
+            "solutions/01_install_cfsketch.cf",
            };
...
       comment   => "We want cf-serverd to be accessible, its especially
                     import for the policyhub to have this port open.";
 
+  am_policy_hub::
+    "cf-sketch"
+      usebundle => install_cfsketch,
+      comment   => "Install cf-sketch so we can easily use the CFEngine desing center";
}}}

h1(fullscreen). What happened ?
{{ gradient silver white silver white }}

h1. Install VCS::vcs_mirror from Design Center
{{ gradient silver white silver white }}

# Install VCS::vcs_mirror with cf-sketch
{{{
/usr/local/bin/cf-sketch --install VCS::vcs_mirror
}}}
# Add to body common control inputs in promises.cf
# Copy masterfiles mirror solution policy into place
{{{
cp /vagrant/exercises/solutions/02_connect_to_central_git_repo.cf /var/cfengine/masterfiles/solutions
}}}
# Add to body common control inputs in promises.cf
# Add method promise to mirror masterfiles
{{{
--- a/promises.cf
+++ b/promises.cf
  inputs => { 
             "cfengine_stdlib.cf", 
             "firewall.cf",
+            "solutions/02_connect_to_central_git_repo.cf",
+            "sketches/VCS/vcs_mirror/main.cf",
            };
...
       comment   => "Install cf-sketch so we can easily use the CFEngine desing center";
+
+    "masterfiles"
+      usebundle => mirror_masterfiles,
+      comment => "Masterfiles promises to be a mirror of the central repository";
+
}}}

h1(fullscreen). Before we get too far lets cover some fundamentals
{{ gradient silver white silver white }}

h1. Definitions
{{ gradient silver white silver white }}

Promises are the fundamental statements in CFEngine. Promises are the policy atoms. If there is no promise, nothing happens.

However, promises can become quite complicated and readability becomes an issue, so it is useful to have a way of breaking them down into independent components. The structure of a promise is this: 

* *Promise* - _A declaration about the state we desire to maintain (e.g., the permissions or contents of a file, the availability or absence of a service, the (de)installation of a package)._
* *Promiser* - _This is the object that formally makes the promise. It is always the affected object, since objects can only make promises about their own state or behavior in CFEngine._
* *Promisee (optional)* - _This is a possible stakeholder, someone who is interested in the outcome of the promise. It is used as documentation, and it is used for reasoning in the commercial CFEngine product._
* *Promise Body* - _Everything else about a promise is defined in the body of the promise._
* *Bundle* - _A bundle is a collection of promises in a `sub-routine-like' container. Bundles also allow you to re-use promise code by parameterizing them._
* *Body Part* - _Templates for bodies to hide the details of complex promise specifications (with optional parameters like bundles). For complex body lists, you must fill in a body declaration as an `attachment' to the promise_

{{{
bundle bundletype bundlename (optional parameters){
  type:
     
    contextclasses::
     
       "promiser" -> { "promisee1", "promisee2", ... }
                                 -------------------+
           attribute_1 => value_1,                  |
           attribute_2 => value_2, <---Body Part    |
           ...                                      |<---Promise Body
           attribute_n => value_n;                  |
                                 -------------------+
}
}}}

h1. Promise Types
{{ gradient silver white silver white }}
* vars
* classes
* outputs
* interfaces
* files
* packages
* guest_environments
* methods
* processes
* services
* commands
* storage
* databases
* reports

h1. Decisions, Decisions
{{ gradient silver white silver white }}
{% left %}
CFEngine decisions are made behind the scenes and the results of certain true/false propositions are cached in Booleans referred to as `classes'. There are no if-then-else statements in CFEngine; all decisions are made with classes.

Classes fall into hard (discovered) and soft (user-defined) types.
{% end %}
{% right %}
h2. Hard Classes

* os name
* hostname
* time (Monday, Sept, Day9,Yr2012, Night, HR00, GMT_Hr00)
* ip address
* network interface names
{% end %}
h2. Some hard classes
{{{
cf3>  -> Defined classes = { 10_13_120_134 10_1_1_1 64_bit 8_cpus
Afternoon Day11 GMT_Hr18 Hr13 Hr13_Q3 July Lcycle_2 Min30_35 Min32
PK_MD5_1c54a80a00985fe28273d2566fa3d916 Q3 ThinkPad_W520_local
Wednesday Yr2012 any cfengine cfengine_3 cfengine_3_3 cfengine_3_3_0
common community_edition compiled_on_linux_gnu debian debian_wheezy
fe80__800_27ff_fe00_0 fe80__f2de_f1ff_fe7d_9806 have_aptitude ipv4_10
ipv4_10_1 ipv4_10_13 ipv4_10_13_120 ipv4_10_13_120_134 ipv4_10_1_1
ipv4_10_1_1_1 linux linux_3_2_0_26_generic linux_x86_64
linux_x86_64_3_2_0_26_generic
linux_x86_64_3_2_0_26_generic__41_Ubuntu_SMP_Thu_Jun_14_17_49_24_UTC_2012
mac_00_00_00_00_00_00 mac_0a_00_27_00_00_00 mac_f0_de_f1_7d_98_06
net_iface_eth0 net_iface_tun0 net_iface_vboxnet0 thinkpad_w520 ubuntu
ubuntu_12 ubuntu_12_4 verbose_mode x86_64 }
}}}


h1(fullscreen). Lets look at the policy
{{ gradient silver white silver white }}

h1. What happened?
{{ gradient silver white silver white }}
* Go look in /var/cfengine/outputs/
* vcs_mirror made masterfiles a clean clone
* Now its not auto updating anymore.
* Lets clone the central repository and start pushing our changes there
{{{
git clone masterfiles.git 
cp -Rv masterfiles.before_gitify/* masterfiles/
cd masterfiles
cf-promises -f promises.cf
git add .
git rm cf_promises_validated
git commit -m "Copy policy from before the fresh clone"
git push
}}} 

h1(fullscreen). How did it happen?
{{ gradient silver white silver white }}

h1. CFEngine Components
{{ gradient silver white silver white }}

* *cf-agent* - Change agent (This is the dangerous end)
* *cf-execd* - Scheduler (This runs cf-agent on and interval, and can send email reports to the administrator)
* *cf-know* - Knowledge modeler (builds and analyzes semantic knowledge network, Commercial Edition)
* *cf-monitord* - Passive monitoring agent (entropy, cpu, traffic, trend analysis, Commercial Edition)
* *cf-promises* - Promise validator (syntax checker)
* *cf-runagent* - Remote run agent (This is like a cow prod for cf-agent)
* *cf-serverd* - Server (Used to distribute files/policy, and respond to requests from cf-runagent)
* *cf-report* - Knowledge extractor (Converts data from embedded databases to human readable form, like last seen report)
* *cf-key* - Key generation tool (creates a public and private keypair for secure communication, like ssh-keygen)
* *cf-hub* - Data aggregator (used to collect informtion in the commercial product)

h1(fullscreen). Questions?
{{ gradient silver white silver white }}

h1. Notes
{{ gradient silver white silver white }}
* This presentation is on github too "nickanderson/presentations/Vagrant-and-CFEngine_Full-of-awesome-201207":https://github.com/nickanderson/presentations/tree/master/Vagrant-and-CFEngine_Full-of-awesome-201207
* The examples worked at one time 
** "SHA: fbb35eecd1d071a772e4fc5a85e9db711473d2c8":https://github.com/nickanderson/CFEngine-3-by-example-vagrant/commit/fbb35eecd1d071a772e4fc5a85e9db711473d2c8 in my "CFEngine 3 by example Vagrant repository":https://github.com/nickanderson/CFEngine-3-by-example-vagrant
